#include <iostream>
#include <conio.h>
#include <Windows.h>
using namespace std;
char ret;
int c = 0;
int pro = 0;
int ret1 = 0;
int coun = 0;
struct  Node
{

	char data;
	Node* next;
	Node* prev;

	int val;
};

class link
{

public:
	Node * head;
	Node *tail;
	void insert(char);
	void insert1(int);
	void print();
	void delete_head();
	link();
	~link();

};
void link::insert1(int a)
{

	Node *temp = new Node;
	temp->next = NULL;
	temp->prev = NULL;

	temp->data = a;
	int x = a;
	temp->val = x;
	if (head == NULL)
	{
		head = temp;
		tail = head;

	}
	else
	{
		temp->prev = NULL;
		temp->next = head;
		head->prev = temp;
		head = temp;
		head->prev = tail;
		tail->next = head;
	}
}

link::link()
{
	head = NULL;
}
link :: ~link(){

}
void link::insert(char a)
{
	Node *temp = new Node;
	temp->next = NULL;
	temp->prev = NULL;
	temp->data = a;
	int x = a;
	temp->val = x;
	if (head == NULL)
	{
		head = temp;
		tail = head;
	}
	else
	{
		temp->prev = NULL;
		temp->next = head;
		head->prev = temp;
		head = temp;
		head->prev = tail;
		tail->next = head;
	}
}

void link::print()
{
	Node *current;
	current = head;
	while (current != nullptr)
	{
		cout << current->data << " -> ";
		current = current->next;
	}
	cout << "NULL" << endl;
}
void link::delete_head()
{         //deleteing from head
	Node *temp = head;
	Node *temp1 = head->next;
	if (head == tail){
		ret = head->data;
		ret1 = head->val;
		head = NULL;
	}

	else if (head != NULL){
		ret = head->data;
		ret1 = head->val;
		head = temp1;
		temp1->prev = tail;
		tail->next = head;
	}
}
class convert
{

private:
	int length;

public:
	convert();
	~convert();
	char * postfix(char *, char *);   // infix to postfix 
	char * prefix(char *, char *);    //infix to pre (pre)
	bool presdence(char, char);
	bool associativity(char, char);
	bool asso(char, char);
	int temp_pre(char);

	int add(int, int);
	int sub(int, int);
	int mul(int, int);
	int div(int, int);
	int power(int, int);

	void calculation(char *);
	void pre_cal(char *);           //calculate pre calculation 

	void cal_post(char *);         //calculate expression of post 
	char * pre(char *, char *);  //convert infox to postfix sub-function  prefix -> (pre)
};


void convert::cal_post(char *res)
{
	link stack;
	int num = 0;
	int len = strlen(res);
	for (int i = 0; i < len; i++){
		if (res[i] != '+'  && res[i] != '-' && res[i] != '*' && res[i] != '/' && res[i] != '(' && res[i] != ')' && res[i] != '^')
		{
			cout << "Enter the Value : " << res[i] << " " << endl;
			cin >> num;
			stack.insert1(num);
		}
		if (stack.head != NULL)
		{
			if (res[i] == '+')
			{
				stack.delete_head();
				int x = ret1;
				stack.delete_head();
				int y = ret1;

				int z = add(y, x);
				stack.insert1(z);

			}
			else if (res[i] == '-')
			{
				stack.delete_head();
				int x = ret1;
				stack.delete_head();
				int y = ret1;

				int z = sub(y, x);

				stack.insert1(z);

			}
			else if (res[i] == '*')
			{
				stack.delete_head();
				int x = ret1;
				stack.delete_head();
				int y = ret1;

				int z = mul(y, x);

				stack.insert1(z);

			}
			else if (res[i] == '/')
			{
				stack.delete_head();
				int x = ret1;
				stack.delete_head();
				int y = ret1;

				int z = div(y, x);

				stack.insert1(z);

			}
			else if (res[i] == '^')
			{
				stack.delete_head();
				int x = ret1;
				stack.delete_head();
				int y = ret1;

				int z = power(y, x);

				stack.insert1(z);
			}
		}
	}

	stack.delete_head();
	cout << "  Answer Of Expression ";
	cout << ret1;
	cout << endl;

}
char * convert::pre(char * arr, char *res)
{
	int len = strlen(arr);
	link stack;
	int j = 0;
	for (int i = 0; i < len; i++)
	{
		if (arr[i] != '+'  && arr[i] != '-' && arr[i] != '*' && arr[i] != '/' && arr[i] != '(' && arr[i] != ')' && arr[i] != '^')
		{
			res[j] = arr[i];
			j++;
		}
		else if (stack.head == NULL || stack.head->data == '(' && arr[i] != ')')
		{
			stack.insert(arr[i]);
		}
		else if (arr[i] == '(')
		{
			stack.insert(arr[i]);
		}
		else if (arr[i] == ')')
		{
			while (stack.head->data != '(')
			{
				stack.delete_head();
				res[j] = ret;
				j++;
			}
			stack.delete_head();
		}
		else if (presdence(arr[i], stack.head->data) == true)
		{
			while (stack.head->data != '(' && stack.head->data != ')'&&presdence(arr[i], stack.head->data) == true)
			{
				if (c == 1)
				{
					stack.insert(arr[i]);
				}
				else {
					stack.delete_head();
					res[j] = ret;
					j++;
					if (stack.head == NULL || stack.head->data == '(')
					{
						stack.insert(arr[i]);
						goto aa;
					}

					if (stack.head->data != '(' && stack.head->data != ')' && presdence(arr[i], stack.head->data) == false)
					{
						if (asso(arr[i], stack.head->data) == true)
						{
							stack.delete_head();
							res[j] = ret;
							j++;
							stack.insert(arr[i]);
						}
						else {
							stack.insert(arr[i]);
						}
					}
				}
			}
		}
		else if (presdence(arr[i], stack.head->data) == false)
		{
			if (asso(arr[i], stack.head->data) == true)
			{
				stack.delete_head();
				res[j] = ret;
				j++;
				stack.insert(arr[i]);
			}
			else {
				stack.insert(arr[i]);
			}
		}

	aa:;
	}
	if (stack.head != stack.tail)
	{
		while (stack.head != stack.tail)
		{
			stack.delete_head();
			res[j] = ret;
			j++;
		}
	}

	stack.delete_head();
	res[j] = ret;
	j++;
	cout << endl;
	length = j;
	res[j] = '\0';
	return res;
}
bool convert::asso(char a, char b){
	if (a == '^')
	{
		return true;
	}
	else {
		return false;
	}
}

int convert::add(int a, int b)
{
	int z = a + b;
	return z;

}
int convert::sub(int a, int b)
{
	int z = a - b;
	return z;
}
int convert::mul(int a, int b)
{

	int z = a * b;
	return z;
}
int convert::div(int a, int b)
{
	int z = a / b;
	return z;
}
int convert::power(int a, int b)
{
	int z = pow(a,b);
	return z;
}
bool convert::associativity(char a, char b)
{
	if (a == '*' || a == '/' || a == '+' || a == '-')
	{
		return true;
	}
	else if (a == '+' && b == '+')
	{
		return true;
	}
	else if (a == '-' && b == '-')
	{
		return true;
	}

	else if (a == '^')
	{
		return false;
	}
}
int convert::temp_pre(char a)
{
	int pre;

	if (a == '*' || a == '/')
	{
		pre = 2;
	}
	else if (a == '+' || a == '-')
	{
		pre = 1;
	}
	else if (a == '^')
	{
		pre = 3;
	}

	return pre;
}
bool convert::presdence(char a, char b)
{
	int q = temp_pre(a);
	int w = temp_pre(b);
	if (q == w)
	{
		c = 2;
		return false;
	}
	else if (q < w)
	{
		c = 0;
		return true;
	}
	else if (q > w)
	{
		c = 1;
		return true;;
	}
}
convert::convert(){

}
convert::~convert(){
}

char * convert::postfix(char * arr, char *res)
{
	int len = strlen(arr);
	link stack;
	int j = 0;
	for (int i = 0; i < len; i++)
	{
		if (arr[i] != '+'  && arr[i] != '-' && arr[i] != '*' && arr[i] != '/' && arr[i] != '(' && arr[i] != ')' && arr[i] != '^')
		{
			res[j] = arr[i];
			j++;
		}
		else if (stack.head == NULL || stack.head->data == '(' && arr[i] != ')')
		{
			stack.insert(arr[i]);
		}
		else if (arr[i] == '(')
		{
			stack.insert(arr[i]);
		}
		else if (arr[i] == ')')
		{
			while (stack.head->data != '(')
			{
				stack.delete_head();
				res[j] = ret;
				j++;
			}
			stack.delete_head();
		}
		else if (presdence(arr[i], stack.head->data) == true)
		{
			while (stack.head->data != '(' && stack.head->data != ')'&&presdence(arr[i], stack.head->data) == true)
			{
				if (c == 1)
				{
					stack.insert(arr[i]);
				}
				else {

					stack.delete_head();
					res[j] = ret;
					j++;
					if (stack.head == NULL || stack.head->data == '(')
					{
						stack.insert(arr[i]);
						goto aa;
					}

					if (stack.head->data != '(' && stack.head->data != ')' && presdence(arr[i], stack.head->data) == false)
					{
						if (associativity(arr[i], stack.head->data) == true)
						{
							stack.delete_head();
							res[j] = ret;
							j++;
							stack.insert(arr[i]);
						}
						else {
							stack.insert(arr[i]);
						}
					}
				}
			}
		}
		else if (presdence(arr[i], stack.head->data) == false)
		{
			if (associativity(arr[i], stack.head->data) == true)
			{
				stack.delete_head();
				res[j] = ret;
				j++;
				stack.insert(arr[i]);
			}
			else {
				stack.insert(arr[i]);
			}
		}

	aa:;
	}
	if (stack.head != stack.tail)
	{
		while (stack.head != stack.tail)
		{
			stack.delete_head();
			res[j] = ret;
			j++;
		}
	}
	stack.delete_head();
	res[j] = ret;
	j++;
	cout << endl;
	length = j;
	res[j] = '\0';
	return res;
}
char * convert::prefix(char *arr, char *r)
{
	pro = 1;
	char *ww = new char[100];
	int len = strlen(arr);
	int l = len;
	int j = 0;
	while (len != 0)
	{
		r[j] = arr[len - 1];
		j++;
		len--;
	}

	for (int i = 0; i < l; i++)
	{
		if (r[i] == ')'){
			r[i] = '(';
		}
		else if (r[i] == '(')
		{
			r[i] = ')';
		}
	}
	r[l] = '\0';
	char *q = pre(r, ww);
	return q;
}

void convert::calculation(char *res)
{
	link stack;
	int num = 0;
	int len = strlen(res);
	for (int i = 0; i < len; i++){
		if (res[i] != '+'  && res[i] != '-' && res[i] != '*' && res[i] != '/' && res[i] != '(' && res[i] != ')' && res[i] != '^')
		{
			cout << "Enter the Value : " << res[i] << " " << endl;
			cin >> num;
			stack.insert1(num);
		}
		if (stack.head != NULL)
		{
			if (res[i] == '+')
			{
				stack.delete_head();
				int x = ret1;
				stack.delete_head();
				int y = ret1;

				int z = add(x, y);
				stack.insert1(z);

			}
			else if (res[i] == '-')
			{
				stack.delete_head();
				int x = ret1;
				stack.delete_head();
				int y = ret1;

				int z = sub(x, y);

				stack.insert1(z);

			}
			else if (res[i] == '*')
			{
				stack.delete_head();
				int x = ret1;
				stack.delete_head();
				int y = ret1;

				int z = mul(x, y);

				stack.insert1(z);

			}
			else if (res[i] == '/')
			{
				stack.delete_head();
				int x = ret1;
				stack.delete_head();
				int y = ret1;

				int z = div(x, y);

				stack.insert1(z);

			}
			else if (res[i] == '^')
			{
				stack.delete_head();
				int x = ret1;
				stack.delete_head();
				int y = ret1;

				int z = power(x, y);

				stack.insert1(z);
			}
		}
	}
	stack.delete_head();
	cout << "  Answer Of Expression ";
	cout << ret1;
	cout << endl;
}

void convert::pre_cal(char *a)
{

	char *temp = new char[100];
	int i = 0;
	int num = 0;
	link stack;
	link l1;
	int len = strlen(a);
	len--;

	while (len != 0){
		temp[i] = a[len];
		i++;
		len--;
	}
	calculation(a);
}
int main()
{
	convert obj;

	char arr[1000];
	char r[100];
	char  res[100];
	cout << "Enter the Equation " << endl;
	cin >> arr;
	char choice = 0;
	while (choice != 'e')
	{

		cout << "1- Postfix " << endl;
		cout << "2- Prefix " << endl;

		choice = _getch();
		system("CLS");


		if (choice == '1')
		{
			int q = strlen(arr);
			for (int i = 0; i < q; i++){
				cout << arr[i] << " ";
			}
			cout << endl;

			char *a = obj.postfix(arr, res);
			int len = strlen(a);

			for (int i = 0; i < len; i++){
				cout << a[i] << " ";
			}
			cout << endl;

			cout << "For Calculation Press 3 " << endl;
			choice = _getch();
			if (choice == '3'){
				obj.cal_post(a);
			}

		}

		if (choice == '2')
		{
			int q = strlen(arr);
			for (int i = 0; i < q; i++){
				cout << arr[i] << " ";
			}
			cout << endl;

			char *b = obj.prefix(arr, r);
			int lenn = strlen(b);
			int k = lenn;
			while (k != 0){
				k--;
				cout << b[k] << " ";
			}
			cout << endl;

			cout << "For Calculation Press 4 " << endl;
			choice = _getch();
			if (choice == '4'){
				obj.pre_cal(b);

			}

		}
		if (choice == 'e')
		{
			exit(0);
		}
	}

	system("pause");
}
