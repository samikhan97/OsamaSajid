#include <iostream>
#include <conio.h>

using namespace std;

template<typename T>
class Vector {
public:
	class Iterator;
	class Reverse_Iterator;
private:
	T* mArr;
	int mSize, mCap;
public:
	Vector();		
	Vector(int cap);
	~Vector();
	void reallocate(int cap);
	Vector(const Vector<T>&);
	const Vector<T>& operator=(const Vector<T>& vec);
	void push_back(const T&);
	void pop_back();
	int size();
	int getCap();
	T& operator[] (int);
	void insert(typename Vector<T>::Iterator& position, const T& value);
	void erase(typename Vector<T>::Iterator& position);
	Iterator begin();
	Iterator end();
	Reverse_Iterator rbegin();
	Reverse_Iterator rend();

	//Iterator Class
	class Iterator {
	private:
		T* mPtr;
		int mIndex;

	public:
		Iterator();
		Iterator(T*, int);
		Iterator(const Iterator&);
		T& operator*();
		void operator++(int);
		bool operator!=(const Iterator&);
	};

	//Reverse Iterator Class
	class Reverse_Iterator {
	private:
		T* mPtr;
		int mIndex;

	public:
		Reverse_Iterator(T*, int);
		Reverse_Iterator(const Reverse_Iterator&);
		T& operator*();
		void operator++(int);
		bool operator!=(const Reverse_Iterator&);
	};
};

/* Iterator Class Starts */
template<typename T>
Vector<T>::Iterator::Iterator(const Iterator& itr) {
	mPtr = itr.mPtr;
	mIndex = itr.mIndex;
}

template<typename T>
Vector<T>::Iterator::Iterator(T* ptr, int index) {
	if(index >= 0) { 
		mPtr = ptr;
		mIndex = index;
	}
}

template<typename T>
Vector<T>::Iterator::Iterator() {
	
}

template<typename T>
T& Vector<T>::Iterator::operator*() {
	return mPtr[mIndex];
}

template<typename T>
void Vector<T>::Iterator::operator++(int) {
	mIndex++;
}

template<typename T>
bool Vector<T>::Iterator::operator!=(const Iterator& itr) {
	return (mPtr != itr.mPtr || mIndex != itr.mIndex);
}

/* Iterator Class Ends */

/* Reverse_Iterator Class Starts */
template<typename T>
Vector<T>::Reverse_Iterator::Reverse_Iterator(const Reverse_Iterator& itr) {
	mPtr = itr.mPtr;
	mIndex = itr.mIndex;
}

template<typename T>
Vector<T>::Reverse_Iterator::Reverse_Iterator(T* ptr, int index) {
	if(index >= 0) { 
		mPtr = ptr;
		mIndex = index;
	}
}

template<typename T>
T& Vector<T>::Reverse_Iterator::operator*() {
	return mPtr[mIndex];
}

template<typename T>
void Vector<T>::Reverse_Iterator::operator++(int) {
	mIndex--;
}

template<typename T>
bool Vector<T>::Reverse_Iterator::operator!=(const Reverse_Iterator& itr) {
	return (mPtr != itr.mPtr || mIndex != itr.mIndex - 1);
}

/* Reverse_Iterator Class Ends */


/* Vector Class Starts */

template<typename T>
Vector<T>::Vector() {
	mCap = 256;
	mSize = 0;
	mArr = new T[mCap];
}

template<typename T>
Vector<T>::~Vector() {
	delete[] mArr;
	mArr = NULL;
}

template<typename T>
Vector<T>::Vector(int cap) {
	if(cap > 0) {
		mCap = cap;
		mSize = 0;
		mArr = new T[mCap];	
	}
}

template<typename T>
void Vector<T>::reallocate(int cap) {
	if(mArr != NULL) {
		delete[] mArr;
	}
	mCap = cap;
	mArr = new T[mCap];
}

template<typename T>
Vector<T>::Vector(const Vector<T>& vec) {
	mSize = vec.mSize;
	mCap = vec.mCap;
	mArr = new T[mCap];

	for(int x = 0; x < mSize; x++) {
		mArr[x] = vec.mArr[x];
	}
}

template<typename T> 
const Vector<T>& Vector<T>::operator=(const Vector& vec) {
	if(mArr != NULL) {
		delete[] mArr;
	}
	mSize = vec.mSize;
	mCap = vec.mCap;
	mArr = new T[mCap];

	for(int x = 0; x < mSize; x++) {
		mArr[x] = vec.mArr[x];
	}
}

template<typename T>
void Vector<T>::push_back(const T& value) {
	if(mSize < mCap) {
		mArr[mSize++] = value;
	} else {
		int newSize = mSize + 1;
		int newCap = mCap * 2;
		T* newArr = new T[newCap];
		for(int x = 0; x < mSize; x++) {
			newArr[x] = mArr[x];
		}
		newArr[mSize] = value;
		if(mArr != NULL) {
			delete[] mArr;
		}
		mArr = newArr;
		mSize = newSize;
		mCap = newCap;
	}
}

template<typename T>
void Vector<T>::pop_back() {
	if(mSize - 1 > mCap / 2) {
		mSize--;
	} else {
		int newSize = mSize - 1;
		if(newSize >= 1) {
			int newCap = mCap / 2;
			T* newArr = new T[newCap];
			for(int x = 0; x < newSize; x++) {
				newArr[x] = mArr[x];
			}
			if(mArr != NULL) {
				delete[] mArr;
			}
			mArr = newArr;
			mCap = newCap;
			mSize--;
		} else {
			delete[] mArr;
			mArr = NULL;
			mSize = 0;
			mCap = 0;
		}
	}
}

template<typename T>
int Vector<T>::size() {
	return mSize;
}

template<typename T>
int Vector<T>::getCap() {
	return mCap;
}

template<typename T>
T& Vector<T>::operator[](int index) {
	return mArr[index];
}

template<typename T>
typename Vector<T>::Iterator Vector<T>::begin() {
	Vector<T>::Iterator itr(mArr, 0);
	return itr;
}

template<typename T>
typename Vector<T>::Iterator Vector<T>::end() {
	Vector<T>::Iterator itr(mArr, mSize);
	return itr;
}

template<typename T>
typename Vector<T>::Reverse_Iterator Vector<T>::rbegin() {
	Vector<T>::Reverse_Iterator itr(mArr, mSize - 1);
	return itr;
}

template<typename T>
typename Vector<T>::Reverse_Iterator Vector<T>::rend() {
	Vector<T>::Reverse_Iterator itr(mArr, 0);
	return itr;
}

template<typename T>
void Vector<T>::insert(typename Vector<T>::Iterator& position, const T& value) {
	if(mSize + 1 <= mCap) {
		Iterator i = position;
		Iterator endItr(mArr, mSize + 1);
		T temp = value;
		T temp2;
		while (i != endItr) {
			temp2 = *i;
			*i = temp;
			temp = temp2;
			i++;
		}
		mSize++;
	} else {
		int newCap = mCap * 2;
		T* newArr = new T[newCap];
		Iterator i;
		Iterator endItr(mArr, mSize + 1);
		int index = 0;
		for(i = begin(); i != position; i++) {
			newArr[index] = *i;
			index++;
		}
		newArr[index] = value;
		index++;
		mSize++;
		while (i != endItr) {
			newArr[index] = *i;
			index++;
			i++;
		}
		mCap = newCap;
		delete[] mArr;
		mArr = newArr;
	}
}

template<typename T>
void Vector<T>::erase(typename Vector<T>::Iterator& position) {
	if(mSize - 1 > mCap / 2) {
		Iterator first = position;
		position++;
		Iterator second = position;

		while (second != end()) {
			*first = *second;
			first++; second++;
		}
	} else {
		int i = 0;
		Iterator src = begin();
		int newCap = mCap / 2;
		T* newArr = new T[newCap];
		while (src != end()) {
			if(src != position) {
				newArr[i] = *src;
				i++;
			}
			src++;
		}
		delete[] mArr;
		mArr = newArr;
		mCap = newCap;
	}
	mSize--;
}

/* Vector Class Ends */

int main() {

	char choice = NULL;
	Vector<char> vec(8);

	while(choice != '5') {
		system("CLS");
		
		cout << "\n\n\t\t\tVector and Iterator (Char only example)" << endl;
		cout << "\n\t\t\t1. Push back\n\t\t\t2. Pop Back\n\t\t\t3. Insert & Erase Sample Run (From Assignment)\n\t\t\t4. Reverse Iterator\n\t\t\t5. Exit\n\n\t\t\t" << endl;

		if(vec.size() > 0) {
			cout << "\tVector Capacity: " << vec.getCap() << " --- Vector Size: " << vec.size() << endl;
			cout << "\n\t\t{";
			for(Vector<char>::Iterator itr = vec.begin(); itr != vec.end(); itr++) {
				cout << *itr << ", ";
			}
			cout << "\b\b}";
		} else {
			cout << "\tVector is empty right now. Use Push Back option to fill it up." << endl;
		}

		choice = _getch();
		system("CLS");
		if(choice == '1') {
			char ch = NULL;
			cout << "Press any key on keyboard to Add that \"char\" to Vector.\nPress ESC to return to menu." << endl;
			ch = _getch();
			while (ch != 27) {
				vec.push_back(ch);
				cout << "Pushed Back -- " << ch << " --  Size: " << vec.size() << " Capacity: " << vec.getCap() << endl;
				ch = _getch();
			}
		} else if(choice == '2') {
			char ch = NULL;
			cout << "Press any key on keyboard to Pop last \"char\" in Vector.\nPress ESC to return to menu." << endl;
			ch = _getch();
			while (ch != 27) {
				vec.pop_back();
				cout << "Pushed Back -- " << ch << " --  Size: " << vec.size() << " Capacity: " << vec.getCap() << endl;
				ch = _getch();
			}
		} else if(choice == '3') {
			Vector<int> v;
			for(int x = 0; x < 10; x++) {
				v.push_back(x);
			}
	
			cout << "\n\t\tOriginal Array: \n\t\t";
			for(int i = 0; i < v.size(); i++) {
				cout << v[i] << " ";
			}

			Vector<int>::Iterator itr;
			for(itr = v.begin(); *itr != 6; itr++);
			v.insert(itr, -1);

			cout << "\n\n\t\tArray after inserting -1 before 6: \n\t\t";
			for(int i = 0; i < v.size(); i++) {
				cout << v[i] << " ";
			}

			cout << "\n\n\t\tArray after erasing 9: \n\t\t";
			for(itr = v.begin(); *itr != 9; itr++);
			v.erase(itr);

			for(int i = 0; i < v.size(); i++) {
				cout << v[i] << " ";
			}
			cout << endl;
			
			cout << "Press any key to continue" << endl;
			_getch();
		} else if(choice == '4') {

			cout << "\n\t\tOriginal:\n\n\t\t{";
			for(Vector<char>::Iterator itr = vec.begin(); itr != vec.end(); itr++) {
				cout << *itr << ", ";
			}
			cout << "\b\b}";

			cout << "\n\t\tReversed:\n\n\t\t{";
			cout << "\n\t\t{";
			for(Vector<char>::Reverse_Iterator itr = vec.rbegin(); itr != vec.rend(); itr++) {
				cout << *itr << ", ";
			}
			cout << "\b\b}\n\n";

			cout << "Press any key to continue" << endl;
			_getch();
		}
	}
	return 0;

}
