#include <iostream>
#include <string>
#include <conio.h>
using namespace std;
int ok = 0;
int no = 0;
int ch = 0;
int oe = 1;
struct  Node
{

	int data;
	int power;
	Node* next;
	Node* prev;
	Node *tail;
};

class link
{
private:

public:
	Node * head;
	void insert_at_tail(int, int);
	void print1();
	link();
	~link();
	void temp_add(link l1, link l3);
	void temp_sub(link l1, link l3);
	link link_converter();
	void app(link l1, link l2);
	link mul(link l1, link l2);
	int length(link l1);
	void multiplication(link l1);

	void bubbleSort(Node *h)
	{
		int done, i;
		Node *curr = h;
		Node *last = NULL;
		do{
			done = 0;
			curr = h;
			while (curr->next != last){
				if (curr->power < curr->next->power){
					swap(curr, curr->next);
					done= 1;
				}
				curr = curr->next;
			}
			last = curr;
		}while (done);
	}


	void swap(struct Node *a, struct Node *b)
	{
		int temp = a->data;
		int q = a->power;
		a->data = b->data;
		a->power = b->power;
		b->data = temp;
		b->power = q;
	}
};

int link::length(link l1)
{
	int c = 0;
	Node *temp = l1.head;
	while (temp != NULL){
		c++;
		temp = temp->next;

	}
	return c;
}////////////////////////////////////////////////////




void link::temp_sub(link l1, link l3){


	Node *temp = l1.head;
	Node *temp1 = l3.head;
	Node *pre = NULL;
	while (temp != NULL){
		pre = temp;
		temp = temp->next;
	}

	pre->next = l3.head;
	temp1->prev = pre;
	////////////////////////

	l1.bubbleSort(l1.head);
	l1.print1();

	Node *a = l1.head;
	Node *b = a->next;

	int len = length(l1);
	while (a != NULL)
	{
		while (b != NULL)
		{
			if (a->power == b->power)
			{
				a->data = a->data - b->data;

				Node *c = b->prev;
				c->next = b->next;
				b->next->prev;
				if (b->next != NULL){
					b->next->prev = c;
				}
				len--;

				b = a;
			}
			b = b->next;
		}
		len--;

		a = a->next;
		if (a != NULL){
			b = a->next;
		}
	}


	l1.print1();

}





///////////////////////////////////////////////////////////////////////
void link::temp_add(link l1, link l3){


	Node *temp = l1.head;
	Node *temp1 = l3.head;
	Node *pre = NULL;
	while (temp != NULL){
		pre = temp;
		temp = temp->next;
	}

	pre->next = l3.head;
	temp1->prev = pre;
	////////////////////////


	l1.bubbleSort(l1.head);
	l1.print1();

	Node *a = l1.head;
	Node *b = a->next;

	int len = length(l1);
	while (a != NULL)
	{
		while (b != NULL)
		{
			if (a->power == b->power)
			{
				a->data = a->data + b->data;

				Node *c = b->prev;
				c->next = b->next;
				b->next->prev;
				if (b->next != NULL){
					b->next->prev = c;
				}
				len--;
				l1.print1();
				b = a;
			}
			b = b->next;
		}
		len--;

		a = a->next;
		if (a != NULL){
			b = a->next;
		}
	}


	l1.print1();









}



link link::mul(link l1, link l2)
{
	Node *temp = l1.head;
	Node *temp1 = l2.head;
	l1.bubbleSort(l1.head);
	l2.bubbleSort(l2.head);

	link res;
	int cof = 0;
	int pow = 0;
	while (temp != NULL)
	{
		while (temp1 != NULL)
		{
			cof = temp->data * temp1->data;
			pow = temp->power + temp1->power;
			res.insert_at_tail(cof, pow);
			temp1 = temp1->next;

		}
		temp1 = l2.head;
		temp = temp->next;
	}

	res.bubbleSort(res.head);
	return res;
}

void link::multiplication(link l1)
{

	l1.bubbleSort(l1.head);

	Node *a = l1.head;
	Node *b = a->next;

	int len = length(l1);
	while (a != NULL)
	{
		while (b != NULL)
		{
			if (a->power == b->power)
			{
				a->data = a->data + b->data;

				Node *c = b->prev;
				c->next = b->next;
				b->next->prev;
				b->next->prev = c;
				len--;
				l1.print1();
				b = a;
			}
			b = b->next;
		}
		len--;

		a = a->next;
		if (a != NULL){
			b = a->next;
		}
	}


	l1.print1();

}


void link::app(link l1, link l2)
{

	Node *b = l2.head;
	Node *a = l1.head;
	while (a != NULL && b != NULL)
	{
		if (a->power == b->power)
		{
			ok = 1;
			break;
		}
		else {
			ok = 0;
			no++;
			b = b->next;
		}
	}
}

link link::link_converter()
{
	link l1;
	char *a = new char[100];
	char *b = new char[100];
	//	link l1;
	//link l2;

	char *q = new char[100];
	char *w = new char[100];

	cout << "\nEnter the Polynomial : \t\n" << endl;
	cin >> a;

	int len = strlen(a);

	int i = 0;
	int y = 0;
	int x = 0;

	int oh = 0;
aa:

	for (i = oh; i < len; i++)
	{
		if (a[i] != 'x'){
			q[x] = a[i];
			x++;
		}
		else if (a[i] == 'x')
		{
			break;
		}
	}
	i = i + 2;
	for (int j = i; j < len; j++)
	{

		if (a[j] != '+' && a[j] != '-')
		{
			w[y] = a[j];
			y++;

		}
		else if (a[j] == '+' || a[j] == '-')
		{
			break;
		}
	}
	i = i + 1;

	int z = atoi(q);
	int t = atoi(w);

	l1.insert_at_tail(z, t);

	for (int i = 0; i < 50; i++)
	{
		q[i] = 0;
		w[i] = 0;
	}


	x = 0;
	y = 0;
	oh = i;
	if (i < len)
	{
		goto aa;
	}


	return l1;
}

link::link()
{
	head = NULL;

}
link :: ~link()
{

}
void link::insert_at_tail(int x, int y)
{
	Node*temp = head;
	Node* newN = new Node();
	newN->data = x;
	newN->power = y;
	newN->next = NULL;
	newN->prev = NULL;

	if (head == NULL)
	{
		head = newN;
		newN->prev = head;
		newN->next = NULL;
	}
	else
	{
		int i;
		for (i = 0; temp->next != NULL; i++)
		{
			temp = temp->next;
		}

		newN->prev = temp;
		newN->next = NULL;
		temp->next = newN;
	}
}
void link::print1()
{
	Node *current;
	current = head;
	while (current != nullptr)
	{
		if (current->data > 0){
			cout << current->data << "x" << "^" << current->power << "  ";
			current = current->next;


		}
		else
		{
			cout << current->data << "x" << "^" << current->power << " ";
			current = current->next;
		}
	}
	cout << "NULL" << endl;
}
void menu(){
	cout << "\n     ************************* Polynomial Operations ***********************" << endl;
	cout<<"\n     Press 1 for ADDITION : "<<endl;
	cout<<"\n     Press 2 for SUBTRACTION : "<<endl;
	cout<<"\n     Press 3 for MULTIPLICATION : "<<endl;
	cout<<"\n     Press 4 to exit : "<<endl;

}


int main()
{
	while(1){
		system("CLS");
		menu();
		link obj;
		link l1, l2, l3, l4, l5;
		int choice,x;
		cin>>choice;
		if(choice>4){
			cout<<"Wrong choice! enter again :"<<endl;
			cin>>choice;
		}
		else{
			system("CLS");
			if(choice==1){
				l1 = obj.link_converter();
				l2 = obj.link_converter();
				cout<<"\nAddition result : "<<endl;
				obj.temp_add(l1, l2);
				cout<<"\nenter any key to return to main menu :"<<endl;
				system("pause>0");
			}
			if(choice==2){
				l1 = obj.link_converter();
				l2 = obj.link_converter();
				cout<<"\nSubtraction result : "<<endl;
				obj.temp_sub(l1, l2);
				cout<<"\nenter any key to return to main menu :"<<endl;
				system("pause>0");
			}
			if(choice==3){
				l1 = obj.link_converter();
				l2 = obj.link_converter();
				l3 = obj.mul(l1, l2);
				cout<<"\nMultiplication result : "<<endl;
				obj.multiplication(l3);
				cout<<"\nenter any key to return to main menu :"<<endl;
				system("pause>0");
			}	
			if(choice==4){
				exit(0);	
			}
		}
	}
	system("pause");

}
