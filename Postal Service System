#include <iostream>
#include <conio.h>
#include <math.h>
#include <Windows.h>
#include <cmath>
#include <fstream>
using namespace std;

float a = 0;
float b = 0;
struct node
{
	friend class list;
	friend class hashing;
private:
	char zip[20];
	char lon1[20];
	char lat1[20];

	int data;  //zip-code
	float lon; // longitude
	float lat; // latutude
	node* next;

};


class list{
	friend class node;
private:
	int loc;
public:
	node * head;
	list();
	~list();
	list(int);
	void insert_at_tail(char *, char *, char *);
	void print();
	void sea(int);

	void deleteList();
	int len_checker();
	void delete_tail();

};
void list::deleteList()
{
	int y = len_checker();
	for (int i = 0; i < y; i++){
		delete_tail();
	}

}
void list::delete_tail(){         //deleteing from tail
	node *temp = head;
	node *del = NULL;
	if (head->next == NULL)
	{
		head = NULL;
	}

	if (head != NULL)
	{
		for (int i = 1; temp->next->next != NULL; i++)
		{
			temp = temp->next;
		}
		del = temp;
		del = del->next;
		delete del;
		temp->next = NULL;
	}
}

int list::len_checker()
{
	int v = 0;
	node *temp = head;
	while (temp != NULL){
		temp = temp->next;
		v++;
	}

	return v;
}

void list::sea(int key)
{
	node *temp = head;
	int check = 0;
	while (temp != NULL)
	{
		if (temp->data == key)
		{
			cout << "Number Found" << endl;
			cout << temp->lon << "  " << temp->lat << " " << endl;
			a = temp->lon;
			b = temp->lat;
			check = 0;
			break;
		}
		else {
			check = 1;
		}

		temp = temp->next;
	}
	if (check == 1){
		cout << "Number Not Found " << endl;
	}

}
void list::print()
{
	node *current;
	current = head;
	while (current != nullptr)
	{
		cout << current->data << " -> ";
		current = current->next;
	}
	cout << "NULL" << endl;
}
void list::insert_at_tail(char * zip, char * lo, char * la)
{
	int z = atoi(zip);
	float a = atof(lo);
	float b = atof(la);
	node*temp = head;
	node* newN = new node();

	strcpy_s(newN->zip, zip);
	strcpy_s(newN->lon1, lo);
	strcpy_s(newN->lat1, la);

	newN->data = z;  //zip in integer;
	newN->lon = a;
	newN->lat = b;

	newN->next = NULL;

	if (head == NULL)
	{
		head = newN;
		newN->next = NULL;
		loc++;
	}
	else
	{
		int i;
		for (i = 0; temp->next != NULL; i++)
		{
			temp = temp->next;
		}
		newN->next = NULL;
		temp->next = newN;
		loc++;
	}
}


list::list(){

	head = NULL;
	loc = 0;
}
list::~list(){

	deleteList();
}

int read_from_file(list & all_data)
{

	int len = 0;
	char *zip = new char[20];
	char *lon = new char[20];
	char *lat = new char[20];

	ifstream fin("data.csv");

	if (!fin.is_open()){
		cout << "File Could Not Open" << endl;
	}
	else
	{
		while (!fin.eof())
		{
			fin.getline(zip, 20, ',');
			fin.getline(lon, 20, ',');
			fin.getline(lat, 20, '\n');
			len++;
			all_data.insert_at_tail(zip, lon, lat);
		}
	}
	return len;
}


class hashing
{
	friend class list;
	friend class node;
private:
	int size_of_hash;
	list **arr; //hash table 

	list data;  //data read from file
	int length;  // total data length 
	int el;   //total inserted

	//list **table;

public:
	hashing();
	~hashing();
	void insert(char *, char *, char *);  // pass key and insert in Hash table string method hashing
	void print_all();  // print the hash table of string methof
	void search();  // search the value in hash table
	int fold(char *s, int size);  //return index of the entered string by using string method hashing
	void get_data_from_file();  // set the data from file in list
	void insert_all_data();    //set all data in hash table; string

	// Extra  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void rehash();            //delete the list and double the size and again hash the key to decrease the load factor 
	void insert_division();   //hashing the keys in the table by division method 
	void search_division();  //searching the input zip code in the hash table 
	void distance_div();     //distance after through the rehash table 
	//Extra //////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	void load_factor();       //load factor find
	void average_length();
	void distance();
};

void hashing::rehash()          //delete the prev table double size 
{
	for (int i = 0; i < size_of_hash; i++)
	{
		arr[i][0].deleteList();
	}
	el = 0;

	for (int i = 0; i < size_of_hash; i++)
	{
		delete arr[i];
	}
	delete arr;

	size_of_hash = size_of_hash * 2;

	arr = new list*[size_of_hash];
	for (int i = 0; i < size_of_hash; i++)
	{
		arr[i] = NULL;
	}
	for (int i = 0; i < size_of_hash; i++)
	{
		arr[i] = new list;
	}

}

void hashing::search_division()      //search the key in table by div
{

	int zi;
	cout << "Enter The Zip-Code : " << endl;
	cin >> zi;

	int si = zi % size_of_hash;
	arr[si][0].sea(zi);

}

void hashing::insert_division()            //insert in hash table by division
{
	node *temp = data.head;
	for (int i = 0; temp->next != NULL; temp = temp->next)
	{
		int index = 0;
		index = temp->data % size_of_hash;
		arr[index][0].insert_at_tail(temp->zip, temp->lon1, temp->lat1);
		el++;
	}
}

void hashing::distance_div()   //distance find for the hash table hashed by division
{
	search_division();

	float x = a;
	float x1 = b;

	search_division();

	float y = a;
	float y1 = b;


	float la = (y1 - x1) / 2;
	float lo = (y - x) / 2;

	float sine = pow(sin(la), 2);
	float cose = pow(sin(lo), 2);
	float mul = cos(x1) * cos(y1);
	int res1 = la + (lo * mul);

	int result = 6373 * 2 * asin(res1);
	cout << "Distance : " << result << endl;

}

void hashing::distance()            //distance for the table hashed by folding method
{
	search();

	float x = a;
	float x1 = b;

	search();

	float y = a;
	float y1 = b;


	float la = (y1 - x1) / 2;
	float lo = (y - x) / 2;

	float sine = sin(la);
	sine = sine *sine;
	float cose = sin(lo);
	cose = cose *cose;

	float mul = cos(x1) * cos(y1);
	float res1 = sine + (cose * mul);
	float pp = sqrt(res1);

	float result = 6373 * (2 * asin(pp));
	cout << "Distance : " << result << endl;

}
void hashing::average_length()
{
	int a = el / size_of_hash;     // average length of the link list 
	cout << "Average Distance " << a << " " << endl;


}
void hashing::load_factor()
{
	int a = el / size_of_hash;     //el = number of keys stored in table 
	cout << "Load Factor " << a << " " << endl;

}
void hashing::search()
{
	char *zi = new char[20];
	cout << "Enter The Zip-Code : " << endl;
	cin >> zi;

	int l = strlen(zi);

	zi[l] = '\0';
	int si = fold(zi, l);
	int key = atoi(zi);
	arr[si][0].sea(key);
}

void hashing::insert_all_data()       //insert all data of excel sheet in hash table by string hash function
{
	node *temp = data.head;
	for (int i = 0; temp->next != NULL; temp = temp->next)
	{
		insert(temp->zip, temp->lon1, temp->lat1);
	}
}

void hashing::get_data_from_file()
{
	int a = read_from_file(data);
	length = a;

}
hashing::hashing()
{
	size_of_hash = 197;
	arr = new list*[size_of_hash];
	for (int i = 0; i < size_of_hash; i++)
	{
		arr[i] = NULL;
	}
	for (int i = 0; i < size_of_hash; i++)
	{
		arr[i] = new list;
	}

}

hashing::~hashing()
{
	/*for (int i = 0; i < size_of_hash; i++)
	{
		arr[i][0].deleteList();
	}
	el = 0;

	for (int i = 0; i < size_of_hash; i++)
	{
		delete arr[i];
	}
	delete arr;*/

}
int hashing::fold(char *s, int size)
{
	int length = size;
	char temp[4];
	int len = 0;
	unsigned long long int sum = 0;

	while (length != 0)
	{
		for (int i = 0; i < 4; i++)
		{
			temp[i] = s[len];
			len++;
			if (s[len] == '\0')
			{
				length--;
				break;
			}
			length--;
		}

		int mult = 1;
		for (int k = 0; k < 4; k++)
		{
			sum += temp[k] * mult;
			mult *= 256;
		}
	}
	return(sum % size_of_hash);
}

void hashing::insert(char * key, char *lon, char *lat)       //insert folding string 
{
	int l = strlen(key);
	int index = 0;
	index = fold(key, l);

	arr[index][0].insert_at_tail(key, lon, lat);
	el++;
}

void hashing::print_all()
{
	for (int i = 0; i < size_of_hash; i++)
	{
		arr[i][0].print();
	}

}






int main()
{
	hashing obj;
	obj.get_data_from_file();



	char choice = NULL;
	while (choice != 'e')
	{

		cout << "\n\n\t\t\t****Hashing****\n" << endl;
		cout << "\n\t\t\t1. Insert All Data in Hash Table\n\t\t\t2. Insert in Hash Table\n\t\t\t3. Search" <<
			"\n\t\t\t4. Load Factor\n\t\t\t5. Distance\n\t\t\t6. Average Length\n\t\t\t7. Exit" << endl;
		choice = _getch();

		if (choice == '1')
		{
			obj.insert_all_data();
		}

		if (choice == '2')
		{
			char * a = new char[20];
			char * b = new char[20];
			char * c = new char[20];
			cout << "Enter the Zip-code" << endl;
			cin >> a;
			cout << "Longitude" << endl;
			cin >> b;
			cout << "Latitiude" << endl;
			cin >> c;
			obj.insert(a, b, c);
		}
		if (choice == '3')
		{
			obj.search();
		}
		if (choice == '4')
		{
			obj.load_factor();
		}

		if (choice == '5')
		{
			obj.distance();
		}
		if (choice == '6')
		{
			obj.average_length();
		}
		if (choice == '7')
		{
			exit(0);
		}
	}




	system("pause");
}
