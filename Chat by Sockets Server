#include <stdio.h>
#include <sys/socket.h>
#include <stdlib.h>
#include <netinet/in.h>

#include <semaphore.h>
#include <sys/shm.h>
#include <sys/types.h>
#include <unistd.h>
#include <sys/wait.h>

#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include <termios.h>

#include <semaphore.h>
#include <sys/shm.h>
#include <sys/types.h>
#include <unistd.h>
#include <sys/wait.h>


#define PORT 8080

#define SHMSIZE     1024


char getch() 
{
    char buf = 0;
    struct termios old = { 0 };
    fflush(stdout);
    if (tcgetattr(0, &old) < 0) perror("tcsetattr()");
    old.c_lflag    &= ~ICANON;   // local modes = Non Canonical mode
    old.c_lflag    &= ~ECHO;     // local modes = Disable echo. 
    old.c_cc[VMIN]  = 1;         // control chars (MIN value) = 1
    old.c_cc[VTIME] = 0;         // control chars (TIME value) = 0 (No time)
    if (tcsetattr(0, TCSANOW, &old) < 0) perror("tcsetattr ICANON");
    if (read(0, &buf, 1) < 0) perror("read()");
    old.c_lflag    |= ICANON;    // local modes = Canonical mode
    old.c_lflag    |= ECHO;      // local modes = Enable echo. 
    if (tcsetattr(0, TCSADRAIN, &old) < 0) perror ("tcsetattr ~ICANON");
    return buf;
}

int main(int argc, char const *argv[])
{
  
    int server_fd, new_socket, valread;
    struct sockaddr_in address;
    int opt = 1;
    int addrlen = sizeof(address);
    char buffer[1024] = {0};
      
    
    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0)
    {
        perror("socket failed");
        exit(EXIT_FAILURE);
    }
      
  
    if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT,
                                                  &opt, sizeof(opt)))
    {
        perror("setsockopt");
        exit(EXIT_FAILURE);
    }
    address.sin_family = AF_INET;
    address.sin_addr.s_addr = INADDR_ANY;
    address.sin_port = htons( PORT );
      
  
    if (bind(server_fd, (struct sockaddr *)&address, 
                                 sizeof(address))<0)
    {
        perror("bind failed");
        exit(EXIT_FAILURE);
    }
    if (listen(server_fd, 3) < 0)
    {
        perror("listen");
        exit(EXIT_FAILURE);
    }
    if ((new_socket = accept(server_fd, (struct sockaddr *)&address, 
                       (socklen_t*)&addrlen))<0)
    {
        perror("accept");
        exit(EXIT_FAILURE);
    }


   ////////////////////////////////////////////////

 key_t key = ftok("shmfile",65);
key_t key1 = ftok("shmfile",65);
   
    int id_sem = shmget(key,1024,0666|IPC_CREAT);
      int id_cs = shmget(key1,1024,0666|IPC_CREAT);
 
sem_t *semaphore;
      sem_t *sem;
 
	if (id_sem==-1 || id_cs==-1 )
	{
		printf("ERROR!");
		return 1;
	}

	semaphore= (sem_t*) shmat(id_sem, NULL, 0);
	sem= (sem_t*) shmat(id_sem, NULL, 0);
	char *str= (char*) shmat(id_cs, (void*)0, 0);

	sem_init(semaphore, 1, 1); 

   
 



while (1){
char hello [100] ;
 int pid = fork();

if (pid==0){
str[0]='0';
 valread = read( new_socket , buffer, 1024);
    printf("%s\n",buffer );

}
else {
  printf("Enter the message\n");
    scanf("%s", hello);
 send(new_socket , hello , strlen(hello) , 0 );  

 str[0]='1';

    printf("Data written in memory: %s\n",str);
}

}
    
    return 0;
}
