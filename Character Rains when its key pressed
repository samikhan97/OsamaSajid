

 [org 0x0100]
jmp start
; PCB layout:
; ax,bx,cx,dx,si,di,bp,sp,ip,cs,ds,ss,es,flags,next,dummy
; 0, 2, 4, 6, 8,10,12,14,16,18,20,22,24, 26 , 28 , 30
pcb: times 32*16 dw 0 ; space for 32 PCBs
stack: times 32*256 dw 0 ; space for 32 512 byte stacks
nextpcb: dw 1 ; index of next free pcb
current: dw 0 ; index of current pcb
timerCount: dw 0
delay: dw 0

mytask:
push bp
mov bp, sp
push ax
push bx
push si
push es
push cx
push dx

sub sp, 2 
mov ax, 0xb800
mov es, ax
mov ax, [bp + 4]
mov ah, 0x07
mov si, [cs:timerCount]
mov cl, ' '
mov ch, 0x07
mov dx, 0xFFFF
loopRain:
mov [es:si], ax

delayLoop:
dec dx
jnz delayLoop

mov [es:si], cx
mov dx, 0xFFFF
add si, 160
cmp si, 4000
jb loopRain

pop dx
pop cx
pop es
pop si
pop bx
pop ax
mov sp, bp
pop bp
ret 

initpcb: 
push bp
mov bp, sp
push ax
push bx
push cx
push si
mov bx, [nextpcb] 
cmp bx, 32 
je exit 
mov cl, 5
shl bx, cl 
mov ax, [bp+8] 
mov [pcb+bx+18], ax 
mov ax, [bp+6] 
mov [pcb+bx+16], ax 
mov [pcb+bx+22], ds 
mov si, [nextpcb]
mov cl, 9
shl si, cl 
add si, 256*2+stack 
mov ax, [bp+4] 
sub si, 2 
mov [si], ax
sub si, 2 
mov [pcb+bx+14], si 
mov word [pcb+bx+26], 0x0200 
mov ax, [pcb+28] 
mov [pcb+bx+28], ax 
mov ax, [nextpcb] 
mov [pcb+28], ax 
inc word [nextpcb]
exit: 
pop si
pop cx
pop bx
pop ax
pop bp
ret 6

timer: 
push ds
push bx
push cs
pop ds 

add word[cs:timerCount], 2
cmp word[cs:timerCount], 156
jb carryOnNoROundUp
mov word[cs:timerCount], 0

carryOnNoROundUp:
mov word[cs:delay], 0
mov bx, [current] 
shl bx, 1
shl bx, 1
shl bx, 1
shl bx, 1
shl bx, 1 
mov [pcb+bx+0], ax 
mov [pcb+bx+4], cx 
mov [pcb+bx+6], dx 
mov [pcb+bx+8], si 
mov [pcb+bx+10], di
mov [pcb+bx+12], bp
mov [pcb+bx+24], es
pop ax 
mov [pcb+bx+2], ax 
pop ax 
mov [pcb+bx+20], ax 
pop ax 
mov [pcb+bx+16], ax 
pop ax 
mov [pcb+bx+18], ax 
pop ax 
mov [pcb+bx+26], ax
mov [pcb+bx+22], ss 
mov [pcb+bx+14], sp
mov bx, [pcb+bx+28]
mov [current], bx
mov cl, 5
shl bx, cl 
mov cx, [pcb+bx+4]
mov dx, [pcb+bx+6]
mov si, [pcb+bx+8]
mov di, [pcb+bx+10]
mov bp, [pcb+bx+12]
mov es, [pcb+bx+24]
mov ss, [pcb+bx+22]
mov sp, [pcb+bx+14]
push word [pcb+bx+26]
push word [pcb+bx+18] 
push word [pcb+bx+16] 
push word [pcb+bx+20] 
exitTimer:
mov al, 0x20
out 0x20, al
mov ax, [pcb+bx+0] 
mov bx, [pcb+bx+2]
pop ds
iret 
start: 
xor ax, ax
mov es, ax 
cli
mov word [es:8*4], timer
mov [es:8*4+2], cs 
sti
nextkey: 
xor ah, ah
int 0x16 
cmp ah, 27
je exitStart
push cs 
mov bx, mytask
push bx 
mov ah, 0
push ax 	;parameter
call initpcb 
jmp nextkey

exitStart:
mov ax, 0x4c00
int 0x21
