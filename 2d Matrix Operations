#include <iostream>
#include <conio.h>
using namespace std;

void deleteArray(int** matrix, int rows, int cols)
{
	for (int** temp = matrix; temp < matrix + rows; temp++)
	{
		delete[] *temp;
	}
	delete[] matrix;
}

int** InputMatrix(int& rows, int& cols, int IntValue)
{

	int**mat = 0;


	cout << "Enter the number of the Rows:";
	cin >> rows;
	cout << "Enter the number of the Columns:";
	cin >> cols;

	if (rows>0 && cols>0)
	{
		mat = new int*[rows];

		for (int **temp = mat; temp < mat + rows; temp++)
		{
			*temp = new int[cols];
		}


		for (int ** temp = mat; temp < mat + rows; temp++)
		{
			for (int *temp1 = *temp; temp1 < *temp + cols; temp1++)
			{
				*temp1=IntValue;
				IntValue++;
			}
		}

		return mat;
	}

	else 
	{
		cout << "invalid input of the rows or columns" << endl;
	}

}

void OutputMatrix(int** matrix, const int ROWS, const int COLS)
{

	for (int **temp = matrix; temp < matrix + ROWS; temp++)
	{
		for (int *temp1 = *temp; temp1 < *temp + COLS; temp1++)
		{
			cout << *temp1 << " ";
		}

		cout << endl;
	}


}

int** AddMatrix(int** matrixA, int** matrixB, const int ROWS, const int COLS)
{
	int ** result = 0;
	int i = 0;
	int j = 0;

	result = new int*[ROWS];

	for (int **temp = result; temp < result + ROWS; temp++)
	{
		*temp = new int[COLS];
	}

	for (int **temp = result; temp < result + ROWS; temp++)
	{
		for (int *temp1 = *temp; temp1 < *temp + COLS; temp1++)
		{
			*temp1 = *(*(matrixA + i) + j) + *(*(matrixB + i) + j);
			j++;
		}

		j = 0;
		i++;
	}

	return result;

}

int** TransposeMatrix(int** matrix, const int ROWS, const int COLS)
{
	int **re = 0;
	

	re = new int*[COLS];

	for (int **temp = re; temp < re + COLS; temp++)
	{
		*temp = new int[ROWS];
	}

	for (int i = 0; i < COLS; i++)
	{
		

		for (int j = 0; j < ROWS; j++)
		{
			re[i][j] = matrix[j][i];
		}

		
	}

	return re;
}

bool IsSymmetric(int** matrix, const int ROWS, const int COLS)
{
	bool test = 1;
	if (ROWS == COLS)
	{
		for (int i = 0; i < ROWS && test; i++)
		{
			for (int j = 0; j < COLS &&test; j++)
			{
				if (matrix[i][j] == matrix[j][i])
				{
					test = 1;
				}

				else
				{
					test = 0;
				}
			}
		}
	}
	
	else
	{
		test = 0;
	}

	return test;
}

void InterchangeRows(int*& row1, int*& row2)
{
	int *temp = row1;
	row1 = row2;
	row2 = temp;
}

void InterchangeRows(int** matrix, const int ROWS, const int COLS)
{
	int r1;
	int r2;

	cout << "Enter the First Row ::";
	cin >> r1;
	cout << "Enter the Second Row ::";
	cin >> r2;

	while (r1 >= ROWS || r2 >= ROWS)
	{
		cout << "The row you entered is not correct " << endl;
		cout << "Enter the First Row ::";
		cin >> r1;
		cout << "Enter the Second Row ::";
		cin >> r2;
	}

	InterchangeRows(*(matrix + r1), *(matrix + r2));
}





int main()
{

	int rows=0;
	int cols=0;
	int r=0;
	int c=0;

	cout << "Enter Details of the Matrix A" << endl;
	int **matrixA = InputMatrix(rows, cols,1);
	cout << "Elements of the Matrix B" << endl;
	int **matrixB = InputMatrix(r, c,2);
	int **reB; 
	int **reA;

	cout << "Elements of the Matrix A" << endl;
	OutputMatrix(matrixA, rows, cols);
	cout << endl;

	cout << "Elements of the Matrix B" << endl;
	OutputMatrix(matrixB, r, c);
	cout << endl;

		if (rows == r && cols == c)
	{
		int **result = AddMatrix(matrixA, matrixB, rows, cols);
		cout << "The Addition of Matrix B is :" << endl;
		OutputMatrix(result, rows, cols);
		deleteArray(result, rows, cols);
	}

	else 
	{
		cout << "The Matrix cannot be added" << endl;
	}

	cout << endl;

	if (rows == cols)
	{
		reA = TransposeMatrix(matrixA, rows, cols);
		cout << "The Transpose of Matrix A is :" << endl;
		OutputMatrix(reA, rows, cols);
	}

	else 
	{
		cout << "The Transpose of the MAtrix A is not applicable" << endl;
	}

	cout << endl;

	if (r == c)
	{
		reB = TransposeMatrix(matrixB, r, c);
		cout << "The Transpose of Matrix B is :" << endl;
		OutputMatrix(reB, r, c);

	}

	else 
	{
		cout << "The Transpose of the MAtrix B is not applicable" << endl;
	}

	cout << endl;



	if (IsSymmetric(matrixA, rows, cols) == 0)
	{
		cout << "The Matrix A is not Symmetric" << endl;
	}

	else 
	{
		cout << "The Matrix is Symmetric" << endl;
	}

	if (IsSymmetric(matrixB, rows, cols) == 0)
	{
		cout << "The Matrix B is not Symmetric" << endl;
	}

	else 
	{
		cout << "The Matrix B is Symmetric" << endl;
	}

	cout << endl;

	cout << "The interchanged row is " << endl;
	InterchangeRows(matrixA, rows, cols);
	OutputMatrix(matrixA, rows, cols);
	cout << endl;

	deleteArray(matrixB, rows, cols);
	deleteArray(matrixA, r, c);
	deleteArray(reA, rows, cols);
	deleteArray(reB, r, c);

	getch();

}
